{"remainingRequest":"/Users/rfarrer/repos/collapse/node_modules/docz-core/node_modules/babel-loader/lib/index.js?{\"presets\":[\"@babel/preset-flow\",\"@babel/preset-react\",[\"/Users/rfarrer/repos/collapse/node_modules/babel-preset-docz/dist/index.js\",{\"flow\":true,\"typescript\":false,\"parseProps\":true}]],\"plugins\":[\"@babel/plugin-syntax-object-rest-spread\",\"@babel/plugin-proposal-class-properties\",\"react-flow-props-to-prop-types\",[\"/Users/rfarrer/repos/collapse/node_modules/docz-utils/lib/named-asset-import.js\",{\"loaderMap\":{\"svg\":{\"ReactComponent\":\"@svgr/webpack?-prettier,-svgo![path]\"}}}]],\"cacheDirectory\":true,\"babelrc\":false}!/Users/rfarrer/repos/collapse/src/Collapse.js","dependencies":[{"path":"/Users/rfarrer/repos/collapse/src/Collapse.js","mtime":1540684925528},{"path":"/Users/rfarrer/repos/collapse/node_modules/cache-loader/dist/cjs.js","mtime":1540683830849},{"path":"/Users/rfarrer/repos/collapse/node_modules/docz-core/node_modules/babel-loader/lib/index.js","mtime":1539563296618}],"contextDependencies":[],"result":["function _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { PureComponent } from 'react'; // Helper function for render props. Sets a function to be called, plus any additional functions passed in\n\nvar callAll = function callAll() {\n  for (var _len = arguments.length, fns = new Array(_len), _key = 0; _key < _len; _key++) {\n    fns[_key] = arguments[_key];\n  }\n\n  return function () {\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n\n    return fns.forEach(function (fn) {\n      return fn && fn.apply(void 0, args);\n    });\n  };\n};\n\nvar Collapse =\n/*#__PURE__*/\nfunction (_PureComponent) {\n  _inherits(Collapse, _PureComponent);\n\n  function Collapse() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Collapse);\n\n    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      args[_key3] = arguments[_key3];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Collapse)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"state\", {\n      height: _this.props.collapsedHeight,\n      isOpen: _this.getIsOpen({\n        isOpen: _this.props.defaultOpen\n      }),\n      counter: 0\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"collapsible\", void 0);\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"content\", void 0);\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"setOpen\", function () {\n      return {\n        height: _this.content ? _this.content.clientHeight : 'auto'\n      };\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"setClosed\", function () {\n      return {\n        height: _this.props.collapsedHeight\n      };\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"toggleIsOpen\", function () {\n      return _this.setState(function (_ref) {\n        var isOpen = _ref.isOpen;\n        return {\n          isOpen: !isOpen\n        };\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"handleCollapsibleTransitionEnd\", function () {\n      if (_this.collapsible && _this.collapsible.clientHeight !== 0) {\n        _this.setState({\n          height: 'auto'\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"getTogglerProps\", function () {\n      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n        onClick: function onClick() {}\n      };\n      return _objectSpread({\n        id: \"CollapseToggle-\".concat(_this.state.counter),\n        'aria-controls': \"CollapsePanel-\".concat(_this.state.counter),\n        'aria-expanded': Boolean(_this.getIsOpen()),\n        tabIndex: 0\n      }, props, {\n        onClick: callAll(props.onClick, _this.toggleIsOpen)\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"getCollapsibleProps\", function () {\n      var _objectSpread2;\n\n      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n        refKey: 'ref'\n      };\n      return _objectSpread({\n        id: \"CollapsePanel-\".concat(_this.state.counter),\n        'aria-hidden': Boolean(_this.getIsOpen()),\n        onTransitionEnd: _this.handleCollapsibleTransitionEnd\n      }, props, (_objectSpread2 = {}, _defineProperty(_objectSpread2, props.refKey, callAll(_this.assignCollapsibleRef, props[props.refKey])), _defineProperty(_objectSpread2, \"style\", {\n        height: _this.state.height,\n        overflow: 'hidden',\n        willChange: 'height',\n        transition: 'height 300ms cubic-bezier(0.09, 1.03, 0.57, 0.97)'\n      }), _objectSpread2));\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"assignCollapsibleRef\", function (node) {\n      return _this.collapsible = node;\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"assignContentRef\", function (node) {\n      return _this.content = node;\n    });\n\n    return _this;\n  }\n\n  _createClass(Collapse, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      // Iterate counter to create unique IDs for each instance of this component\n      // on the page. Used mainly for `aria-` relationships\n      this.setState({\n        counter: Collapse.counter++\n      }); // If open by default, update the height\n\n      if (this.getIsOpen()) {\n        this.setState(this.setOpen());\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      var _this2 = this;\n\n      var isCurrentlyOpen = this.getIsOpen();\n\n      if (this.getIsOpen(prevState, prevProps) !== isCurrentlyOpen) {\n        if (isCurrentlyOpen) {\n          this.setState(this.setOpen());\n        } else {\n          // reset height from 'auto' to pixel height for smooth collapse animation\n          this.setState(this.setOpen(), function () {\n            // Collapse frame, with a timeout hack to prevent jumps\n            setTimeout(function () {\n              return _this2.setState(_this2.setClosed());\n            }, 0);\n          });\n        }\n      }\n    }\n  }, {\n    key: \"getIsOpen\",\n\n    /**\n     * Returns the state of the isOpen prop.\n     * If it is controlled, return the prop value.\n     * If is isn't, use internal state\n     */\n    value: function getIsOpen() {\n      var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.state;\n      var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.props;\n      return props.isOpen !== null ? props.isOpen : state.isOpen;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return this.props.children({\n        isOpen: Boolean(this.getIsOpen()),\n        getTogglerProps: this.getTogglerProps,\n        getCollapsibleProps: this.getCollapsibleProps,\n        contentRef: this.assignContentRef\n      });\n    }\n  }]);\n\n  return Collapse;\n}(PureComponent);\n\n_defineProperty(Collapse, \"defaultProps\", {\n  isOpen: null,\n  defaultOpen: false,\n  collapsedHeight: 0\n});\n\n_defineProperty(Collapse, \"counter\", 0);\n\nexport { Collapse as default };\nCollapse.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [{\n    \"name\": \"getIsOpen\",\n    \"docblock\": \"Returns the state of the isOpen prop.\\nIf it is controlled, return the prop value.\\nIf is isn't, use internal state\",\n    \"modifiers\": [],\n    \"params\": [{\n      \"name\": \"state\"\n    }, {\n      \"name\": \"props\"\n    }],\n    \"returns\": null,\n    \"description\": \"Returns the state of the isOpen prop.\\nIf it is controlled, return the prop value.\\nIf is isn't, use internal state\"\n  }, {\n    \"name\": \"setOpen\",\n    \"docblock\": null,\n    \"modifiers\": [],\n    \"params\": [],\n    \"returns\": null\n  }, {\n    \"name\": \"setClosed\",\n    \"docblock\": null,\n    \"modifiers\": [],\n    \"params\": [],\n    \"returns\": null\n  }, {\n    \"name\": \"toggleIsOpen\",\n    \"docblock\": null,\n    \"modifiers\": [],\n    \"params\": [],\n    \"returns\": null\n  }, {\n    \"name\": \"handleCollapsibleTransitionEnd\",\n    \"docblock\": \"At the end of the transition open, make the height of the collapible 'auto'.\\nThis will prevent overflow and height issues if the content of the collapsible\\nchanges while the panel is open\",\n    \"modifiers\": [],\n    \"params\": [],\n    \"returns\": null,\n    \"description\": \"At the end of the transition open, make the height of the collapible 'auto'.\\nThis will prevent overflow and height issues if the content of the collapsible\\nchanges while the panel is open\"\n  }, {\n    \"name\": \"getTogglerProps\",\n    \"docblock\": null,\n    \"modifiers\": [],\n    \"params\": [{\n      \"name\": \"props\",\n      \"type\": null\n    }],\n    \"returns\": null\n  }, {\n    \"name\": \"getCollapsibleProps\",\n    \"docblock\": null,\n    \"modifiers\": [],\n    \"params\": [{\n      \"name\": \"props\",\n      \"type\": null\n    }],\n    \"returns\": null\n  }, {\n    \"name\": \"assignCollapsibleRef\",\n    \"docblock\": null,\n    \"modifiers\": [],\n    \"params\": [{\n      \"name\": \"node\",\n      \"type\": {\n        \"name\": \"HTMLElement\",\n        \"nullable\": true\n      }\n    }],\n    \"returns\": null\n  }, {\n    \"name\": \"assignContentRef\",\n    \"docblock\": null,\n    \"modifiers\": [],\n    \"params\": [{\n      \"name\": \"node\",\n      \"type\": {\n        \"name\": \"HTMLElement\",\n        \"nullable\": true\n      }\n    }],\n    \"returns\": null\n  }],\n  \"displayName\": \"Collapse\",\n  \"props\": {\n    \"isOpen\": {\n      \"defaultValue\": {\n        \"value\": \"null\",\n        \"computed\": false\n      },\n      \"required\": false,\n      \"flowType\": {\n        \"name\": \"boolean\",\n        \"nullable\": true\n      },\n      \"description\": \"\"\n    },\n    \"defaultOpen\": {\n      \"defaultValue\": {\n        \"value\": \"false\",\n        \"computed\": false\n      },\n      \"required\": false,\n      \"flowType\": {\n        \"name\": \"boolean\"\n      },\n      \"description\": \"\"\n    },\n    \"collapsedHeight\": {\n      \"defaultValue\": {\n        \"value\": \"0\",\n        \"computed\": false\n      },\n      \"required\": false,\n      \"flowType\": {\n        \"name\": \"number\"\n      },\n      \"description\": \"\"\n    },\n    \"children\": {\n      \"required\": true,\n      \"flowType\": {\n        \"name\": \"signature\",\n        \"type\": \"function\",\n        \"raw\": \"({\\n  isOpen: boolean,\\n  getTogglerProps: (*) => {},\\n  getCollapsibleProps: (*) => {},\\n  contentRef: Ref<*>\\n}) => Node\",\n        \"signature\": {\n          \"arguments\": [{\n            \"name\": \"\",\n            \"type\": {\n              \"name\": \"signature\",\n              \"type\": \"object\",\n              \"raw\": \"{\\n  isOpen: boolean,\\n  getTogglerProps: (*) => {},\\n  getCollapsibleProps: (*) => {},\\n  contentRef: Ref<*>\\n}\",\n              \"signature\": {\n                \"properties\": [{\n                  \"key\": \"isOpen\",\n                  \"value\": {\n                    \"name\": \"boolean\",\n                    \"required\": true\n                  }\n                }, {\n                  \"key\": \"getTogglerProps\",\n                  \"value\": {\n                    \"name\": \"signature\",\n                    \"type\": \"function\",\n                    \"raw\": \"(*) => {}\",\n                    \"signature\": {\n                      \"arguments\": [{\n                        \"name\": \"\",\n                        \"type\": {\n                          \"name\": \"unknown\"\n                        }\n                      }],\n                      \"return\": {\n                        \"name\": \"signature\",\n                        \"type\": \"object\",\n                        \"raw\": \"{}\",\n                        \"signature\": {\n                          \"properties\": []\n                        }\n                      }\n                    },\n                    \"required\": true\n                  }\n                }, {\n                  \"key\": \"getCollapsibleProps\",\n                  \"value\": {\n                    \"name\": \"signature\",\n                    \"type\": \"function\",\n                    \"raw\": \"(*) => {}\",\n                    \"signature\": {\n                      \"arguments\": [{\n                        \"name\": \"\",\n                        \"type\": {\n                          \"name\": \"unknown\"\n                        }\n                      }],\n                      \"return\": {\n                        \"name\": \"signature\",\n                        \"type\": \"object\",\n                        \"raw\": \"{}\",\n                        \"signature\": {\n                          \"properties\": []\n                        }\n                      }\n                    },\n                    \"required\": true\n                  }\n                }, {\n                  \"key\": \"contentRef\",\n                  \"value\": {\n                    \"name\": \"Ref\",\n                    \"elements\": [{\n                      \"name\": \"unknown\"\n                    }],\n                    \"raw\": \"Ref<*>\",\n                    \"required\": true\n                  }\n                }]\n              }\n            }\n          }],\n          \"return\": {\n            \"name\": \"Node\"\n          }\n        }\n      },\n      \"description\": \"\"\n    }\n  }\n};",{"version":3,"sources":["/Users/rfarrer/repos/collapse/src/Collapse.js"],"names":["PureComponent","callAll","fns","args","forEach","fn","Collapse","height","props","collapsedHeight","isOpen","getIsOpen","defaultOpen","counter","content","clientHeight","setState","collapsible","onClick","id","state","Boolean","tabIndex","toggleIsOpen","refKey","onTransitionEnd","handleCollapsibleTransitionEnd","assignCollapsibleRef","overflow","willChange","transition","node","setOpen","prevProps","prevState","isCurrentlyOpen","setTimeout","setClosed","children","getTogglerProps","getCollapsibleProps","contentRef","assignContentRef"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAEA,SAAQA,aAAR,QAAiD,OAAjD,C,CAEA;;AACA,IAAMC,OAAO,GAAG,SAAVA,OAAU;AAAA,oCAAIC,GAAJ;AAAIA,IAAAA,GAAJ;AAAA;;AAAA,SAAY;AAAA,uCAAIC,IAAJ;AAAIA,MAAAA,IAAJ;AAAA;;AAAA,WAC1BD,GAAG,CAACE,OAAJ,CAAY,UAAAC,EAAE;AAAA,aAAIA,EAAE,IAAIA,EAAE,MAAF,SAAMF,IAAN,CAAV;AAAA,KAAd,CAD0B;AAAA,GAAZ;AAAA,CAAhB;;IAqBqBG,Q;;;;;;;;;;;;;;;;;;oFASX;AACNC,MAAAA,MAAM,EAAE,MAAKC,KAAL,CAAWC,eADb;AAENC,MAAAA,MAAM,EAAE,MAAKC,SAAL,CAAe;AAACD,QAAAA,MAAM,EAAE,MAAKF,KAAL,CAAWI;AAApB,OAAf,CAFF;AAGNC,MAAAA,OAAO,EAAE;AAHH,K;;;;;;sFAgDE;AAAA,aAAO;AACfN,QAAAA,MAAM,EAAE,MAAKO,OAAL,GAAe,MAAKA,OAAL,CAAaC,YAA5B,GAA2C;AADpC,OAAP;AAAA,K;;wFAIE;AAAA,aAAO;AAACR,QAAAA,MAAM,EAAE,MAAKC,KAAL,CAAWC;AAApB,OAAP;AAAA,K;;2FAEG;AAAA,aAAM,MAAKO,QAAL,CAAc;AAAA,YAAEN,MAAF,QAAEA,MAAF;AAAA,eAAe;AAACA,UAAAA,MAAM,EAAE,CAACA;AAAV,SAAf;AAAA,OAAd,CAAN;AAAA,K;;6GAOkB,YAAM;AACrC,UAAI,MAAKO,WAAL,IAAoB,MAAKA,WAAL,CAAiBF,YAAjB,KAAkC,CAA1D,EAA6D;AAC3D,cAAKC,QAAL,CAAc;AAACT,UAAAA,MAAM,EAAE;AAAT,SAAd;AACD;AACF,K;;8FAEiB,YAAoD;AAAA,UAAnDC,KAAmD,uEAAnB;AAACU,QAAAA,OAAD,qBAAW,CAAE;AAAb,OAAmB;AACpE;AACEC,QAAAA,EAAE,2BAAoB,MAAKC,KAAL,CAAWP,OAA/B,CADJ;AAEE,iDAAkC,MAAKO,KAAL,CAAWP,OAA7C,CAFF;AAGE,yBAAiBQ,OAAO,CAAC,MAAKV,SAAL,EAAD,CAH1B;AAIEW,QAAAA,QAAQ,EAAE;AAJZ,SAKKd,KALL;AAMEU,QAAAA,OAAO,EAAEjB,OAAO,CAACO,KAAK,CAACU,OAAP,EAAgB,MAAKK,YAArB;AANlB;AAQD,K;;kGAEqB,YAA+C;AAAA;;AAAA,UAA9Cf,KAA8C,uEAApB;AAACgB,QAAAA,MAAM,EAAE;AAAT,OAAoB;AACnE;AACEL,QAAAA,EAAE,0BAAmB,MAAKC,KAAL,CAAWP,OAA9B,CADJ;AAEE,uBAAeQ,OAAO,CAAC,MAAKV,SAAL,EAAD,CAFxB;AAGEc,QAAAA,eAAe,EAAE,MAAKC;AAHxB,SAIKlB,KAJL,wDAKGA,KAAK,CAACgB,MALT,EAKkBvB,OAAO,CAAC,MAAK0B,oBAAN,EAA4BnB,KAAK,CAACA,KAAK,CAACgB,MAAP,CAAjC,CALzB,4CAMS;AACLjB,QAAAA,MAAM,EAAE,MAAKa,KAAL,CAAWb,MADd;AAELqB,QAAAA,QAAQ,EAAE,QAFL;AAGLC,QAAAA,UAAU,EAAE,QAHP;AAILC,QAAAA,UAAU,EAAE;AAJP,OANT;AAaD,K;;mGAEsB,UAACC,IAAD;AAAA,aAAyB,MAAKd,WAAL,GAAmBc,IAA5C;AAAA,K;;+FAEJ,UAACA,IAAD;AAAA,aAAyB,MAAKjB,OAAL,GAAeiB,IAAxC;AAAA,K;;;;;;;wCA1FC;AAClB;AACA;AACA,WAAKf,QAAL,CAAc;AAACH,QAAAA,OAAO,EAAEP,QAAQ,CAACO,OAAT;AAAV,OAAd,EAHkB,CAKlB;;AACA,UAAI,KAAKF,SAAL,EAAJ,EAAsB;AACpB,aAAKK,QAAL,CAAc,KAAKgB,OAAL,EAAd;AACD;AACF;;;uCAEkBC,S,EAAkBC,S,EAAkB;AAAA;;AACrD,UAAMC,eAAe,GAAG,KAAKxB,SAAL,EAAxB;;AAEA,UAAI,KAAKA,SAAL,CAAeuB,SAAf,EAA0BD,SAA1B,MAAyCE,eAA7C,EAA8D;AAC5D,YAAIA,eAAJ,EAAqB;AACnB,eAAKnB,QAAL,CAAc,KAAKgB,OAAL,EAAd;AACD,SAFD,MAEO;AACL;AACA,eAAKhB,QAAL,CAAc,KAAKgB,OAAL,EAAd,EAA8B,YAAM;AAClC;AACAI,YAAAA,UAAU,CAAC;AAAA,qBAAM,MAAI,CAACpB,QAAL,CAAc,MAAI,CAACqB,SAAL,EAAd,CAAN;AAAA,aAAD,EAAwC,CAAxC,CAAV;AACD,WAHD;AAID;AACF;AACF;;;;AAKD;;;;;gCAQE;AAAA,UAFAjB,KAEA,uEAFuB,KAAKA,KAE5B;AAAA,UADAZ,KACA,uEADuB,KAAKA,KAC5B;AACA,aAAOA,KAAK,CAACE,MAAN,KAAiB,IAAjB,GAAwBF,KAAK,CAACE,MAA9B,GAAuCU,KAAK,CAACV,MAApD;AACD;;;6BAoDQ;AACP,aAAO,KAAKF,KAAL,CAAW8B,QAAX,CAAoB;AACzB5B,QAAAA,MAAM,EAAEW,OAAO,CAAC,KAAKV,SAAL,EAAD,CADU;AAEzB4B,QAAAA,eAAe,EAAE,KAAKA,eAFG;AAGzBC,QAAAA,mBAAmB,EAAE,KAAKA,mBAHD;AAIzBC,QAAAA,UAAU,EAAE,KAAKC;AAJQ,OAApB,CAAP;AAMD;;;;EAlHmC1C,a;;gBAAjBM,Q,kBACG;AACpBI,EAAAA,MAAM,EAAE,IADY;AAEpBE,EAAAA,WAAW,EAAE,KAFO;AAGpBH,EAAAA,eAAe,EAAE;AAHG,C;;gBADHH,Q,aAOF,C;;SAPEA,Q","sourcesContent":["// @flow\n\nimport {PureComponent, type Node, type Ref} from 'react';\n\n// Helper function for render props. Sets a function to be called, plus any additional functions passed in\nconst callAll = (...fns) => (...args: Array<*>) =>\n  fns.forEach(fn => fn && fn(...args));\n\ntype Props = {\n  children: ({\n    isOpen: boolean,\n    getTogglerProps: (*) => {},\n    getCollapsibleProps: (*) => {},\n    contentRef: Ref<*>\n  }) => Node,\n  isOpen: ?boolean,\n  defaultOpen: boolean,\n  collapsedHeight: number\n};\n\ntype State = {\n  height: number | string,\n  isOpen: ?boolean,\n  counter: number\n};\n\nexport default class Collapse extends PureComponent<Props, State> {\n  static defaultProps = {\n    isOpen: null,\n    defaultOpen: false,\n    collapsedHeight: 0\n  };\n\n  static counter = 0;\n\n  state = {\n    height: this.props.collapsedHeight,\n    isOpen: this.getIsOpen({isOpen: this.props.defaultOpen}),\n    counter: 0\n  };\n\n  componentDidMount() {\n    // Iterate counter to create unique IDs for each instance of this component\n    // on the page. Used mainly for `aria-` relationships\n    this.setState({counter: Collapse.counter++});\n\n    // If open by default, update the height\n    if (this.getIsOpen()) {\n      this.setState(this.setOpen());\n    }\n  }\n\n  componentDidUpdate(prevProps: Props, prevState: State) {\n    const isCurrentlyOpen = this.getIsOpen();\n\n    if (this.getIsOpen(prevState, prevProps) !== isCurrentlyOpen) {\n      if (isCurrentlyOpen) {\n        this.setState(this.setOpen());\n      } else {\n        // reset height from 'auto' to pixel height for smooth collapse animation\n        this.setState(this.setOpen(), () => {\n          // Collapse frame, with a timeout hack to prevent jumps\n          setTimeout(() => this.setState(this.setClosed()), 0);\n        });\n      }\n    }\n  }\n\n  collapsible: ?HTMLElement;\n  content: ?HTMLElement;\n\n  /**\n   * Returns the state of the isOpen prop.\n   * If it is controlled, return the prop value.\n   * If is isn't, use internal state\n   */\n  getIsOpen(\n    state: $Shape<State> = this.state,\n    props: $Shape<Props> = this.props\n  ) {\n    return props.isOpen !== null ? props.isOpen : state.isOpen;\n  }\n\n  setOpen = () => ({\n    height: this.content ? this.content.clientHeight : 'auto'\n  });\n\n  setClosed = () => ({height: this.props.collapsedHeight});\n\n  toggleIsOpen = () => this.setState(({isOpen}) => ({isOpen: !isOpen}));\n\n  /**\n   * At the end of the transition open, make the height of the collapible 'auto'.\n   * This will prevent overflow and height issues if the content of the collapsible\n   * changes while the panel is open\n   */\n  handleCollapsibleTransitionEnd = () => {\n    if (this.collapsible && this.collapsible.clientHeight !== 0) {\n      this.setState({height: 'auto'});\n    }\n  };\n\n  getTogglerProps = (props: {onClick: ?() => void} = {onClick() {}}) => {\n    return {\n      id: `CollapseToggle-${this.state.counter}`,\n      'aria-controls': `CollapsePanel-${this.state.counter}`,\n      'aria-expanded': Boolean(this.getIsOpen()),\n      tabIndex: 0,\n      ...props,\n      onClick: callAll(props.onClick, this.toggleIsOpen)\n    };\n  };\n\n  getCollapsibleProps = (props: {refKey: string} = {refKey: 'ref'}) => {\n    return {\n      id: `CollapsePanel-${this.state.counter}`,\n      'aria-hidden': Boolean(this.getIsOpen()),\n      onTransitionEnd: this.handleCollapsibleTransitionEnd,\n      ...props,\n      [props.refKey]: callAll(this.assignCollapsibleRef, props[props.refKey]),\n      style: {\n        height: this.state.height,\n        overflow: 'hidden',\n        willChange: 'height',\n        transition: 'height 300ms cubic-bezier(0.09, 1.03, 0.57, 0.97)'\n      }\n    };\n  };\n\n  assignCollapsibleRef = (node: ?HTMLElement) => (this.collapsible = node);\n\n  assignContentRef = (node: ?HTMLElement) => (this.content = node);\n\n  render() {\n    return this.props.children({\n      isOpen: Boolean(this.getIsOpen()),\n      getTogglerProps: this.getTogglerProps,\n      getCollapsibleProps: this.getCollapsibleProps,\n      contentRef: this.assignContentRef\n    });\n  }\n}\n"]}]}